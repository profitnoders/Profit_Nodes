#!/bin/bash

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ–Ω—ã
CLR_INFO='\033[1;97;44m'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏–Ω–µ–º —Ñ–æ–Ω–µ
CLR_SUCCESS='\033[1;30;42m'  # –ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
CLR_WARNING='\033[1;37;41m'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º —Ñ–æ–Ω–µ
CLR_ERROR='\033[1;31;40m'  # –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
CLR_RESET='\033[0m'  # –°–±—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
CLR_GREEN='\033[0;32m' #–ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${CLR_INFO}        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π Waku        ${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
function install_dependencies() {
    sudo apt update -y
    sudo apt upgrade -y
    sudo apt install -y curl iptables build-essential git wget jq make gcc nano tmux htop \
        nvme-cli pkg-config libssl-dev libleveldb-dev tar clang bsdmainutils ncdu unzip
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ curl, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if ! command -v curl &> /dev/null; then
        sudo apt update
        sudo apt install curl -y
    fi
    if ! command -v docker &> /dev/null; then
        curl -fsSL https://get.docker.com | sh
    fi

    if ! command -v docker-compose &> /dev/null; then
        sudo apt update && sudo apt install -y docker-compose
        command -v docker-compose &> /dev/null && echo -e "${CLR_INFO}Docker Compose —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${CLR_RESET}" || { echo -e "\033[1;31;40m–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.${CLR_RESET}"; exit 1; }
    fi 
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã Waku
function install_node() {
    install_dependencies
    install_docker

    cd $HOME
    git clone https://github.com/waku-org/nwaku-compose
    cd nwaku-compose
    cp .env.example .env

    echo -e "${CLR_INFO}–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à RPC Sepolia ETH:${CLR_RESET}"
    read RPC
    
    echo -e "${CLR_INFO}\n–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç EVM –∫–æ—à–µ–ª—å–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å Sepolia ETH:${CLR_RESET}"
    read PRIVATE_KEY
    
    echo -e "${CLR_INFO}\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å:${CLR_RESET}"
    read PASSWORD


    sed -i "s|RLN_RELAY_ETH_CLIENT_ADDRESS=.*|RLN_RELAY_ETH_CLIENT_ADDRESS=$RPC|" .env
    sed -i "s|ETH_TESTNET_KEY=.*|ETH_TESTNET_KEY=$PRIVATE_KEY|" .env
    sed -i "s|RLN_RELAY_CRED_PASSWORD=.*|RLN_RELAY_CRED_PASSWORD=$PASSWORD|" .env

    ./register_rln.sh

    echo -e "${CLR_INFO}\n–ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç—ã 5432 -> 5433; 80 -> 81; 8003 -> 8033; 3000 -> 3001; 4000 -> 4002...${CLR_RESET}"
    echo -e "${CLR_INFO}\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ $HOME/nwaku-compose/docker-compose.yml...${CLR_RESET}"
    if [[ -s "$HOME/nwaku-compose/docker-compose.yml" ]]; then
        echo -e "${CLR_SUCCESS}–§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–º–µ–Ω—É –ø–æ—Ä—Ç–æ–≤...${CLR_RESET}"
        sed -i 's/5432/5433/g' "$HOME/nwaku-compose/docker-compose.yml"
        sed -i 's/80:80/81:80/g' "$HOME/nwaku-compose/docker-compose.yml"
        sed -i 's/8003:8003/8033:8003/g' "$HOME/nwaku-compose/docker-compose.yml"
        sed -i 's/0.0.0.0:3000:3000/0.0.0.0:3001:3001/g; s/127.0.0.1:4000:4000/127.0.0.1:4002:4002/g' "$HOME/nwaku-compose/docker-compose.yml"
        [ -f ~/nwaku-compose/monitoring/configuration/grafana.ini ] || touch ~/nwaku-compose/monitoring/configuration/grafana.ini
        echo -e "[server]\nhttp_port = 3001" >> ~/nwaku-compose/monitoring/configuration/grafana.ini
        echo -e "${CLR_SUCCESS}–ó–∞–º–µ–Ω–∞ –ø–æ—Ä—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.${CLR_RESET}"
    else
        echo -e "${CLR_ERROR}–û—à–∏–±–∫–∞: –§–∞–π–ª $HOME/nwaku-compose/docker-compose.yml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç.${CLR_RESET}"
        exit 1
    fi
    
    docker-compose up -d
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Waku
function update_node() {
    cd $HOME/nwaku-compose
    docker-compose down
    git pull origin master
    docker-compose up -d

    echo -e "${CLR_INFO}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${CLR_RESET}"
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–æ–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 300 —Å—Ç—Ä–æ–∫ + live)
function view_logs() {
    echo -e "${CLR_INFO}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–æ–¥—ã Waku...${CLR_RESET}"
    cd $HOME/nwaku-compose && docker-compose logs --tail=300 -f
}

# –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è NWAKU_IMAGE
function change_nwaku_image() {
    if [[ -s "$HOME/nwaku-compose/.env" ]]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ NWAKU_IMAGE
        CURRENT_IMAGE=$(grep "^NWAKU_IMAGE=" "$HOME/nwaku-compose/.env" | cut -d'=' -f2)
        
        if [[ -n "$CURRENT_IMAGE" ]]; then
            echo -e "${CLR_WARNING}–í–Ω–∏–º–∞–Ω–∏–µ: NWAKU_IMAGE —É–∂–µ –∑–∞–¥–∞–Ω –∫–∞–∫ '$CURRENT_IMAGE'.${CLR_RESET}"
            echo -e "${CLR_INFO}–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ? (y/n)${CLR_RESET}"
            read -r CONFIRM
            if [[ "$CONFIRM" != "y" ]]; then
                echo -e "${CLR_INFO}–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è NWAKU_IMAGE.${CLR_RESET}"
                return
            fi
        fi

        echo -e "${CLR_INFO}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é NWAKU_IMAGE (–ø—Ä–∏–º–µ—Ä: wakuorg/nwaku:v0.35.0):${CLR_RESET}"
        read -r NEW_IMAGE

        if [[ -z "$NEW_IMAGE" ]]; then
            echo -e "${CLR_ERROR}–û—à–∏–±–∫–∞: –í—ã –Ω–µ –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}"
            return
        fi

        sed -i "/^NWAKU_IMAGE=/c\NWAKU_IMAGE=$NEW_IMAGE" "$HOME/nwaku-compose/.env"
        echo -e "${CLR_SUCCESS}NWAKU_IMAGE —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ $NEW_IMAGE${CLR_RESET}"
    else
        echo -e "${CLR_ERROR}–û—à–∏–±–∫–∞: –§–∞–π–ª $HOME/nwaku-compose/.env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç.${CLR_RESET}"
    fi
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ docker-compose
function restart_docker_compose() {
    echo -e "${CLR_INFO}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ docker-compose...${CLR_RESET}"
    cd $HOME/nwaku-compose || { echo -e "${CLR_ERROR}–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $HOME/nwaku-compose –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.${CLR_RESET}"; return; }
    docker-compose down
    docker-compose up -d
    echo -e "${CLR_SUCCESS}docker-compose —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.${CLR_RESET}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
function check_docker_containers() {
    echo -e "${CLR_INFO}–°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${CLR_RESET}"
    docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"

}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã Waku
function check_node_health() {
    echo -e "${CLR_INFO}üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã...${CLR_RESET}"
    cd $HOME/nwaku-compose || { echo -e "${CLR_ERROR}‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $HOME/waku –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.${CLR_RESET}"; return; }
    ./chkhealth.sh
    echo -e "${CLR_INFO}üîç –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ "nodeHealth": "Ready" –∏ "Rln Relay": "Ready", –∑–Ω–∞—á–∏—Ç –≤–∞—à–∞ –Ω–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ${CLR_RESET}"
    echo -e "${CLR_INFO}üîç –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ "nodeHealth": "Initializing", –∑–Ω–∞—á–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø—Ä–µ–∂–¥–µ —á–µ–º –≤–≤–æ–¥–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞! (–≤–ø–ª–æ—Ç—å –¥–æ –¥–≤—É—Ö —Å—É—Ç–æ–∫)${CLR_RESET}"
}

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Waku —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
function remove_node() {
    echo -e "${CLR_WARNING}–í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –Ω–æ–¥—É Waku –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã!${CLR_RESET}"
    echo -e "${CLR_INFO}–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n)${CLR_RESET}"
    read -r CONFIRM

    if [[ "$CONFIRM" != "y" ]]; then
        echo -e "${CLR_INFO}–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.${CLR_RESET}"
        return
    fi

    cd $HOME/nwaku-compose || { echo -e "${CLR_ERROR}–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $HOME/nwaku-compose –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.${CLR_RESET}"; return; }
    docker-compose down
    cd $HOME
    rm -rf nwaku-compose
    rm -rf waku_node.sh

    echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!${CLR_RESET}"
}


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function show_menu() {
    show_logo
    echo -e "${CLR_GREEN} 1)üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É ${CLR_RESET}"
    echo -e "${CLR_GREEN} 2)üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ ${CLR_RESET}"
    echo -e "${CLR_GREEN} 3)üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É ${CLR_RESET}"
    echo -e "${CLR_GREEN} 4)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É ${CLR_RESET}"
    echo -e "${CLR_GREEN} 5)üõ†  –ò–∑–º–µ–Ω–∏—Ç—å NWAKU_IMAGE ${CLR_RESET}"
    echo -e "${CLR_GREEN} 6)üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ${CLR_RESET}"
    echo -e "${CLR_GREEN} 7)ü©∫ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–¥—É (chkhealth.sh) ${CLR_RESET}"
    echo -e "${CLR_ERROR} 8)üóë  –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É ${CLR_RESET}"
    echo -e "${CLR_GREEN} 9)‚ùå –í—ã–π—Ç–∏ ${CLR_RESET}"

    echo -e "${CLR_INFO}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${CLR_RESET}"
    read choice

    case $choice in
        1) install_node ;;
        2) view_logs ;;
        3) update_node ;;
        4) restart_docker_compose ;;
        5) change_nwaku_image ;;
        6) check_docker_containers ;;
        7) check_node_health ;;
        8) remove_node ;;
        8) echo -e "${CLR_INFO}–í—ã—Ö–æ–¥...${CLR_RESET}" && exit 0 ;;
        *) echo -e "${CLR_INFO}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}" && show_menu ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
show_menu
