#!/bin/bash

# –¶–≤–µ—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
CLR_SUCCESS='\033[1;32m'  # –ó–µ–ª–µ–Ω—ã–π
CLR_INFO='\033[1;34m'  # –°–∏–Ω–∏–π
CLR_WARNING='\033[1;33m'  # –ñ–µ–ª—Ç—ã–π
CLR_ERROR='\033[1;31m'  # –ö—Ä–∞—Å–Ω—ã–π
CLR_RESET='\033[0m'  # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${CLR_INFO}     –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –Ω–æ–¥—ã LayerEdge!     ${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã
function install_node() {
    echo -e "${CLR_INFO}‚ñ∂ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${CLR_RESET}"
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y screen git curl build-essential pkg-config libssl-dev jq

    echo -e "${CLR_INFO}‚ñ∂ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go 1.18+...${CLR_RESET}"
    if ! command -v go &> /dev/null; then
        curl -OL https://golang.org/dl/go1.18.10.linux-amd64.tar.gz
        sudo tar -C /usr/local -xzf go1.18.10.linux-amd64.tar.gz
        rm go1.18.10.linux-amd64.tar.gz
        echo "export PATH=\$PATH:/usr/local/go/bin" >> ~/.bashrc
        source ~/.bashrc
    fi

    echo -e "${CLR_INFO}‚ñ∂ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Rust 1.81.0+...${CLR_RESET}"
    if ! command -v rustc &> /dev/null; then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source $HOME/.cargo/env
    fi

    echo -e "${CLR_INFO}‚ñ∂ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Risc0 Toolchain...${CLR_RESET}"
    curl -L https://risczero.com/install | bash && rzup install

    echo -e "${CLR_INFO}‚ñ∂ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Light Node...${CLR_RESET}"
    git clone https://github.com/Layer-Edge/light-node.git $HOME/light-node
    cd $HOME/light-node

    echo -e "${CLR_INFO}‚ñ∂ –°–±–æ—Ä–∫–∞ Light Node...${CLR_RESET}"
    go build

    echo -e "${CLR_INFO}‚ñ∂ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...${CLR_RESET}"
    cat <<EOF > $HOME/light-node/.env
export GRPC_URL=34.31.74.109:9090
export CONTRACT_ADDR=cosmos1ufs3tlq4umljk0qfe8k5ya0x6hpavn897u2cnf9k0en9jr7qarqqt56709
export ZK_PROVER_URL=http://127.0.0.1:3001
export API_REQUEST_TIMEOUT=100
export POINTS_API=https://light-node.layeredge.io
export PRIVATE_KEY='cli-node-private-key'
EOF

    echo -e "${CLR_INFO}‚ñ∂ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd-—Å–µ—Ä–≤–∏—Å–∞...${CLR_RESET}"
    sudo bash -c "cat <<EOT > /etc/systemd/system/layeredge-merkle.service
[Unit]
Description=LayerEdge Merkle Service
After=network.target

[Service]
User=$USER
WorkingDirectory=$HOME/light-node/risc0-merkle-service
ExecStart=cargo run
Restart=always
RestartSec=5
LimitNOFILE=65536
StandardOutput=journal
StandardError=journal
SyslogIdentifier=layeredge-merkle

[Install]
WantedBy=multi-user.target
EOT"

    sudo bash -c "cat <<EOT > /etc/systemd/system/layeredge-lightnode.service
[Unit]
Description=LayerEdge Light Node
After=network.target layeredge-merkle.service
Requires=layeredge-merkle.service

[Service]
User=$USER
WorkingDirectory=$HOME/light-node
EnvironmentFile=$HOME/light-node/.env
ExecStart=$HOME/light-node/light-node
Restart=always
RestartSec=5
LimitNOFILE=65536
StandardOutput=journal
StandardError=journal
SyslogIdentifier=layeredge-lightnode

[Install]
WantedBy=multi-user.target
EOT"

    echo -e "${CLR_INFO}‚ñ∂ –ó–∞–ø—É—Å–∫ Merkle Service –∏ Light Node...${CLR_RESET}"
    sudo systemctl daemon-reload
    sudo systemctl enable layeredge-merkle layeredge-lightnode
    sudo systemctl start layeredge-merkle
    sleep 10
    sudo systemctl start layeredge-lightnode

    echo -e "${CLR_SUCCESS}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–æ–¥–∞ LayerEdge –∑–∞–ø—É—â–µ–Ω–∞.${CLR_RESET}"
    echo -e "${CLR_INFO}‚ñ∂ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: sudo journalctl -u layeredge-lightnode -f${CLR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã
function start_node() {
    echo -e "${CLR_INFO}‚ñ∂ –ó–∞–ø—É—Å–∫ LayerEdge Light Node...${CLR_RESET}"
    sudo systemctl start layeredge-merkle
    sleep 10
    sudo systemctl start layeredge-lightnode
    echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞.${CLR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã
function stop_node() {
    echo -e "${CLR_INFO}‚ñ∂ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ LayerEdge Light Node...${CLR_RESET}"
    sudo systemctl stop layeredge-lightnode
    sudo systemctl stop layeredge-merkle
    echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.${CLR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã
function restart_node() {
    echo -e "${CLR_INFO}‚ñ∂ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ LayerEdge Light Node...${CLR_RESET}"
    stop_node
    start_node
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –Ω–æ–¥—ã
function logs_node() {
    echo -e "${CLR_INFO}‚ñ∂ –õ–æ–≥–∏ –Ω–æ–¥—ã t3rn-executor...${CLR_RESET}"
    sudo journalctl -u layeredge-lightnode -f
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥—ã (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
function remove_node() {
    echo -e "${CLR_WARNING}‚ö† –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É LayerEdge? (y/n)${CLR_RESET}"
    read -p "–í–≤–µ–¥–∏—Ç–µ y –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ n –¥–ª—è –æ—Ç–º–µ–Ω—ã: " confirmation
    if [[ $confirmation == "y" || $confirmation == "Y" ]]; then
        echo -e "${CLR_INFO}‚ñ∂ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã...${CLR_RESET}"
        stop_node
        sudo systemctl disable layeredge-merkle layeredge-lightnode
        sudo rm -rf $HOME/light-node /etc/systemd/system/layeredge-merkle.service /etc/systemd/system/layeredge-lightnode.service
        echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.${CLR_RESET}"
    else
        echo -e "${CLR_INFO}‚ñ∂ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.${CLR_RESET}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é
function show_menu() {
    show_logo
    echo -e "${CLR_INFO}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${CLR_RESET}"
    echo -e "${CLR_SUCCESS}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_SUCCESS}2) ‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_SUCCESS}3) üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_SUCCESS}4) üìú –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –Ω–æ–¥—ã${CLR_RESET}"
    echo -e "${CLR_WARNING}5) üóë –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_ERROR}5) ‚ùå –í—ã–π—Ç–∏${CLR_RESET}"

    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: " choice
    case $choice in
        1) install_node ;;
        2) start_node ;;
        3) restart_node ;;
        4) logs_node ;;
        4) remove_node ;;
        5) echo -e "${CLR_ERROR}–í—ã—Ö–æ–¥...${CLR_RESET}" ;;
        *) echo -e "${CLR_WARNING}–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}" ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
show_menu
