#!/bin/bash

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ–Ω—ã
CLR_INFO='\033[1;97;44m'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏–Ω–µ–º —Ñ–æ–Ω–µ
CLR_SUCCESS='\033[1;30;42m'  # –ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
CLR_WARNING='\033[1;37;41m'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º —Ñ–æ–Ω–µ
CLR_ERROR='\033[1;31;40m'  # –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
CLR_RESET='\033[0m'  # –°–±—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
CLR_GREEN='\033[0;32m' # –ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${CLR_INFO}     –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã Titan      ${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
function install_dependencies() {
    sudo apt update -y && sudo apt upgrade -y
    sudo apt install -y curl wget git docker.io
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
function install_docker() {
    echo -e "${CLR_INFO}–ü—Ä–æ–≤–µ—Ä—è–µ–º Docker...${CLR_RESET}"
    if ! command -v docker &> /dev/null; then
        echo -e "${CLR_WARNING}Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker...${CLR_RESET}"
        sudo apt install docker.io -y
    else
        echo -e "${CLR_SUCCESS}Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${CLR_RESET}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
# function configure_proxy() {
#     echo -e "${CLR_INFO}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-–ø—Ä–æ–∫—Å–∏ –¥–ª—è Docker...${CLR_RESET}"

#     read -p "–í–≤–µ–¥–∏—Ç–µ IP (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): " PROXY_IP
#     read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): " PROXY_PORT
#     read -p "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (–µ—Å–ª–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): " PROXY_LOGIN
#     read -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): " PROXY_PASS

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω—ã –ª–∏ IP –∏ –ø–æ—Ä—Ç
#     if [[ -z "$PROXY_IP" || -z "$PROXY_PORT" ]]; then
#         echo -e "${CLR_WARNING}‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã IP –∏ –ø–æ—Ä—Ç.${CLR_RESET}"
#         return
#     fi

#     # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏-URL (—Å –ª–æ–≥–∏–Ω–æ–º/–ø–∞—Ä–æ–ª–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
#     if [[ -n "$PROXY_LOGIN" && -n "$PROXY_PASS" ]]; then
#         PROXY_URL="http://${PROXY_LOGIN}:${PROXY_PASS}@${PROXY_IP}:${PROXY_PORT}"
#     else
#         PROXY_URL="http://${PROXY_IP}:${PROXY_PORT}"
#     fi

#     # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –¥–ª—è Docker
#     sudo mkdir -p /etc/systemd/system/docker.service.d
#     echo "[Service]
# Environment=\"HTTP_PROXY=$PROXY_URL\"
# Environment=\"HTTPS_PROXY=$PROXY_URL\"
# Environment=\"FTP_PROXY=$PROXY_URL\"
# Environment=\"ALL_PROXY=$PROXY_URL\"
# Environment=\"NO_PROXY=localhost,127.0.0.1\"" | sudo tee /etc/systemd/system/docker.service.d/http-proxy.conf > /dev/null

#     # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
#     sudo systemctl daemon-reload
#     sudo systemctl restart docker

#     echo -e "${CLR_SUCCESS}‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!${CLR_RESET}"
# }

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã Titan
function install_node() {
    install_dependencies
    install_docker

    # echo -e "${CLR_INFO}–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è Docker? (y/n)${CLR_RESET}"
    # read -r USE_PROXY
    # if [[ "$USE_PROXY" == "y" ]]; then
    #     configure_proxy
    # fi

    echo -e "${CLR_INFO}–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–¥—ã...${CLR_RESET}"
    rm -rf ~/.titanedge

    echo -e "${CLR_INFO}–°–∫–∞—á–∏–≤–∞–µ–º Docker-–æ–±—Ä–∞–∑ –Ω–æ–¥—ã Titan...${CLR_RESET}"
    docker pull nezha123/titan-edge

    echo -e "${CLR_INFO}–°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–æ–¥—ã...${CLR_RESET}"
    mkdir -p ~/.titanedge

    echo -e "${CLR_INFO}–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Titan –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${CLR_RESET}"
    docker run --rm -it -v ~/.titanedge:/root/.titanedge nezha123/titan-edge daemon start || true

    if [[ -f ~/.titanedge/config.toml ]]; then
        echo -e "${CLR_INFO}–ú–µ–Ω—è–µ–º –ø–æ—Ä—Ç –Ω–æ–¥—ã —Å 1234 –Ω–∞ 1235...${CLR_RESET}"
        sed -i 's/#ListenAddress = "0.0.0.0:1234"/ListenAddress = "0.0.0.0:1235"/' ~/.titanedge/config.toml
    else
        echo -e "${CLR_WARNING}‚ö†Ô∏è –§–∞–π–ª config.toml –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.${CLR_RESET}"
    fi

    echo -e "${CLR_INFO}–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Titan...${CLR_RESET}"
    docker run -d --network=host -v ~/.titanedge:/root/.titanedge nezha123/titan-edge

    echo -e "${CLR_SUCCESS}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞.${CLR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
function bind_identity() {
    echo -e "${CLR_WARNING}–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Identity Code:${CLR_RESET}"
    read -r IDENTITY_CODE

    echo -e "${CLR_INFO}–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–∞—à –∫–æ–¥...${CLR_RESET}"
    docker run --rm -it -v ~/.titanedge:/root/.titanedge nezha123/titan-edge bind --hash="$IDENTITY_CODE" https://api-test1.container1.titannet.io/api/v2/device/binding

    echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞!${CLR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥—ã
function remove_node() {
    echo -e "${CLR_ERROR}–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –Ω–æ–¥—É Titan...${CLR_RESET}"
    docker stop $(docker ps -q --filter ancestor=nezha123/titan-edge) 2>/dev/null
    docker rm $(docker ps -aq --filter ancestor=nezha123/titan-edge) 2>/dev/null
    rm -rf ~/.titanedge
    echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!${CLR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
function check_logs() {
    echo -e "${CLR_INFO}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–æ–¥—ã Titan...${CLR_RESET}"
    docker logs --tail 100 -f $(docker ps -q --filter ancestor=nezha123/titan-edge)
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function show_menu() {
    show_logo
    echo -e "${CLR_INFO}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${CLR_RESET}"
    echo -e "${CLR_GREEN}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}2) üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Identity Code${CLR_RESET}"
    echo -e "${CLR_GREEN}3) üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤${CLR_RESET}"
    echo -e "${CLR_ERROR}4) üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}5) ‚ùå –í—ã–π—Ç–∏${CLR_RESET}"
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: " choice

    case $choice in
        1) install_node ;;
        2) bind_identity ;;
        3) check_logs ;;
        4) remove_node ;;
        5) echo -e "${CLR_SUCCESS}–í—ã—Ö–æ–¥...${CLR_RESET}" && exit 0 ;;
        *) echo -e "${CLR_ERROR}–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}" && show_menu ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
show_menu
