#!/bin/bash

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
CLR_RST="\e[0m"
CLR_RED="\e[31m"
CLR_GRN="\e[32m"
CLR_YLW="\e[33m"
CLR_BLU="\e[34m"
CLR_PRP="\e[35m"
CLR_CYN="\e[36m"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${CLR_GRN}==========================================================${CLR_RST}"
    echo -e "${CLR_CYN}       –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –Ω–æ–¥—ã Elixir Mainnet    ${CLR_RST}"
    echo -e "${CLR_GRN}==========================================================${CLR_RST}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function install_dependencies() {
    echo -e "${CLR_YLW}‚ñ∂ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${CLR_RST}"
    sudo apt update -y
    sudo apt install -y curl git jq lz4 build-essential unzip docker.io

    sudo systemctl enable docker
    sudo systemctl start docker
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã
function install_node() {
    echo -e "${CLR_BLU}‚ñ∂ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–¥—É Elixir –≤ –º–µ–π–Ω–Ω–µ—Ç–µ...${CLR_RST}"

    INSTALL_DIR="$HOME/elixir-mainnet"
    CONFIG_FILE="$INSTALL_DIR/validator.env"

    mkdir -p "$INSTALL_DIR"
    cd "$INSTALL_DIR" || exit
    wget https://files.elixir.finance/validator.env -O "$CONFIG_FILE"

    echo -e "${CLR_YLW}–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:${CLR_RST}"
    read -r IP_ADDR
    echo -e "${CLR_YLW}–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:${CLR_RST}"
    read -r NODE_NAME
    echo -e "${CLR_YLW}–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å EVM:${CLR_RST}"
    read -r WALLET
    echo -e "${CLR_YLW}–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á EVM:${CLR_RST}"
    read -r PRIV_KEY

    sed -i "s|ENV=.*|ENV=prod|" "$CONFIG_FILE"
    echo "STRATEGY_EXECUTOR_IP_ADDRESS=$IP_ADDR" >> "$CONFIG_FILE"
    echo "STRATEGY_EXECUTOR_DISPLAY_NAME=$NODE_NAME" >> "$CONFIG_FILE"
    echo "STRATEGY_EXECUTOR_BENEFICIARY=$WALLET" >> "$CONFIG_FILE"
    echo "SIGNER_PRIVATE_KEY=$PRIV_KEY" >> "$CONFIG_FILE"

    docker pull elixirprotocol/validator
    docker run --name elixir_mainnet_node --env-file "$CONFIG_FILE" --platform linux/amd64 -p 17691:17690 --restart unless-stopped elixirprotocol/validator

    echo -e "${CLR_GRN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${CLR_RST}"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
function update_node() {
    echo -e "${CLR_BLU}‚ñ∂ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–¥—É Elixir Mainnet...${CLR_RST}"

    docker stop elixir_mainnet_node
    docker rm elixir_mainnet_node
    docker pull elixirprotocol/validator
    docker run --name elixir_mainnet_node --env-file "$HOME/elixir-mainnet/validator.env" --platform linux/amd64 -p 17691:17690 --restart unless-stopped elixirprotocol/validator

    echo -e "${CLR_GRN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${CLR_RST}"
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
function view_logs() {
    echo -e "${CLR_BLU}‚ñ∂ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–æ–¥—ã...${CLR_RST}"
    docker logs -f elixir_mainnet_node
}

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
function remove_node() {
    echo -e "${CLR_BLU}‚ñ∂ –£–¥–∞–ª—è–µ–º –Ω–æ–¥—É Elixir Mainnet...${CLR_RST}"
    docker stop elixir_mainnet_node
    docker rm elixir_mainnet_node
    rm -rf "$HOME/elixir-mainnet"
    echo -e "${CLR_GRN}‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!${CLR_RST}"
}

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞
function show_menu() {
    show_logo
    echo -e "${CLR_CYN}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RST}"
    echo -e "${CLR_CYN}2) üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RST}"
    echo -e "${CLR_CYN}3) üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏${CLR_RST}"
    echo -e "${CLR_CYN}4) üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${CLR_RST}"
    echo -e "${CLR_CYN}5) ‚ùå –í—ã–π—Ç–∏${CLR_RST}"
    
    read -r choice

    case $choice in
        1) install_dependencies; install_node ;;
        2) update_node ;;
        3) view_logs ;;
        4) remove_node ;;
        5) exit 0 ;;
        *) echo -e "${CLR_RED}–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!${CLR_RST}" && show_menu ;;
    esac
}

show_menu
