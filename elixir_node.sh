#!/bin/bash

# –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${GREEN}==========================================================${NC}"
    echo -e "${CYAN}     –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π Elixir     ${NC}"
    echo -e "${GREEN}==========================================================${NC}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã
function install_node() {
    local network=$1
    local image=$2
    local container_name=$3
    local port=$4

    echo -e "${BLUE}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã Elixir –≤ $network...${NC}"

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    sudo apt update -y
    sudo apt upgrade -y
    sudo apt install -y curl git jq lz4 build-essential unzip docker.io

    sudo systemctl enable docker
    sudo systemctl start docker

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${YELLOW}–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose...${NC}"
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    fi

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–¥—ã
    mkdir -p "$HOME/elixir-$network"
    cd "$HOME/elixir-$network" || exit
    wget https://files.elixir.finance/validator.env -O validator.env

    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:${NC}"
    read -r STRATEGY_EXECUTOR_IP_ADDRESS
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:${NC}"
    read -r STRATEGY_EXECUTOR_DISPLAY_NAME
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å EVM:${NC}"
    read -r STRATEGY_EXECUTOR_BENEFICIARY
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á EVM:${NC}"
    read -r SIGNER_PRIVATE_KEY

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    sed -i "s|ENV=.*|ENV=$network|" validator.env
    echo "STRATEGY_EXECUTOR_IP_ADDRESS=$STRATEGY_EXECUTOR_IP_ADDRESS" >> validator.env
    echo "STRATEGY_EXECUTOR_DISPLAY_NAME=$STRATEGY_EXECUTOR_DISPLAY_NAME" >> validator.env
    echo "STRATEGY_EXECUTOR_BENEFICIARY=$STRATEGY_EXECUTOR_BENEFICIARY" >> validator.env
    echo "SIGNER_PRIVATE_KEY=$SIGNER_PRIVATE_KEY" >> validator.env

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    docker pull "$image"
    docker run --name "$container_name" --env-file validator.env --platform linux/amd64 -p "$port:17690" --restart unless-stopped "$image"

    echo -e "${GREEN}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    echo -e "${YELLOW}–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:${NC} docker logs -f $container_name"
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–¥—ã
function update_node() {
    local network=$1
    local image=$2
    local container_name=$3

    echo -e "${BLUE}–û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–¥—É Elixir –≤ $network...${NC}"
    docker stop "$container_name"
    docker rm "$container_name"

    docker pull "$image"
    docker run --name "$container_name" --env-file "$HOME/elixir-$network/validator.env" --platform linux/amd64 -p 17690:17690 --restart unless-stopped "$image"

    echo -e "${GREEN}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥—ã
function remove_node() {
    local network=$1
    local container_name=$2

    echo -e "${BLUE}–£–¥–∞–ª—è–µ–º –Ω–æ–¥—É Elixir –≤ $network...${NC}"
    docker stop "$container_name"
    docker rm "$container_name"
    rm -rf "$HOME/elixir-$network"

    echo -e "${GREEN}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤
function view_logs() {
    local container_name=$1
    echo -e "${BLUE}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container_name...${NC}"
    docker logs -f "$container_name"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function show_menu() {
    show_logo
    echo -e "${CYAN}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É –≤ —Ç–µ—Å—Ç–Ω–µ—Ç–µ${NC}"
    echo -e "${CYAN}2) üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É –≤ —Ç–µ—Å—Ç–Ω–µ—Ç–µ${NC}"
    echo -e "${CYAN}3) üìú –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–æ–¥—ã –≤ —Ç–µ—Å—Ç–Ω–µ—Ç–µ${NC}"
    echo -e "${CYAN}4) üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É –≤ —Ç–µ—Å—Ç–Ω–µ—Ç–µ${NC}"
    echo -e "${CYAN}5) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É –≤ –º–µ–π–Ω–Ω–µ—Ç–µ${NC}"
    echo -e "${CYAN}6) üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É –≤ –º–µ–π–Ω–Ω–µ—Ç–µ${NC}"
    echo -e "${CYAN}7) üìú –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–æ–¥—ã –≤ –º–µ–π–Ω–Ω–µ—Ç–µ${NC}"
    echo -e "${CYAN}8) üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É –≤ –º–µ–π–Ω–Ω–µ—Ç–µ${NC}"
    echo -e "${CYAN}9) ‚ùå –í—ã–π—Ç–∏${NC}"

    echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
    read -r choice

    case $choice in
        1) install_node "testnet-3" "elixirprotocol/validator:testnet" "elixir" 17690 ;;
        2) update_node "testnet" "elixirprotocol/validator:testnet" "elixir" ;;
        3) view_logs "elixir" ;;
        4) remove_node "testnet" "elixir" ;;
        5) install_node "prod" "elixirprotocol/validator" "elixir-main" 17691 ;;
        6) update_node "prod" "elixirprotocol/validator" "elixir-main" ;;
        7) view_logs "elixir-main" ;;
        8) remove_node "prod" "elixir-main" ;;
        9) echo -e "${GREEN}–í—ã—Ö–æ–¥...${NC}" && exit 0 ;;
        *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}" && show_menu ;;
    esac
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
show_menu
