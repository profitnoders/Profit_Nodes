#!/bin/bash

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ–Ω—ã
CLR_INFO='\033[1;97;44m'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏–Ω–µ–º —Ñ–æ–Ω–µ
CLR_SUCCESS='\033[1;30;42m'  # –ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
CLR_WARNING='\033[1;37;41m'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º —Ñ–æ–Ω–µ
CLR_ERROR='\033[1;31;40m'  # –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
CLR_RESET='\033[0m'  # –°–±—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


function show_logo() {
    echo -e "${CLR_INFO}     –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π Unichain mainnet     ${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
function install_dependencies() {
    echo -e "${CLR_INFO}–û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É...${CLR_RESET}"
    sudo apt update && sudo apt upgrade -y
    
    echo -e "${CLR_INFO}–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker...${CLR_RESET}"
    sudo apt install docker.io -y
    
    echo -e "${CLR_INFO}–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose...${CLR_RESET}"
    sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã
function install_node() {
    install_dependencies
    echo -e "${CLR_INFO}–°–∫–∞—á–∏–≤–∞–µ–º Unichain –Ω–æ–¥—É...${CLR_RESET}"
    git clone https://github.com/Uniswap/unichain-node $HOME/unichain-node
    
    echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é.${CLR_RESET}"
    echo -e "${CLR_WARNING}–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env.mainnet –∏ docker-compose.yml –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!${CLR_RESET}"
    echo -e "${CLR_INFO}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:${CLR_RESET}"
    echo -e "nano $HOME/unichain-node/.env.mainnet"
    echo -e "nano $HOME/unichain-node/docker-compose.yml"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã
function start_node() {
    echo -e "${CLR_INFO}–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—É...${CLR_RESET}"
    docker-compose -f $HOME/unichain-node/docker-compose.yml up -d
    echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞!${CLR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã
function stop_node() {
    echo -e "${CLR_INFO}–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–¥—É...${CLR_RESET}"
    docker-compose -f $HOME/unichain-node/docker-compose.yml down
    echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!${CLR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
function check_logs() {
    echo -e "${CLR_INFO}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–æ–¥—ã...${CLR_RESET}"
    docker-compose -f $HOME/unichain-node/docker-compose.yml logs -f
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
function remove_node() {
    echo -e "${CLR_WARNING}–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É? (y/n)${CLR_RESET}"
    read -r confirm
    if [[ "$confirm" == "y" ]]; then
        echo -e "${CLR_INFO}–£–¥–∞–ª—è–µ–º –Ω–æ–¥—É Unichain...${CLR_RESET}"
        docker-compose -f $HOME/unichain-node/docker-compose.yml down -v
        rm -rf $HOME/unichain-node
        echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!${CLR_RESET}"
    else
        echo -e "${CLR_SUCCESS}–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.${CLR_RESET}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–æ–¥—ã
function check_status() {
    echo -e "${CLR_INFO}–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–¥—ã...${CLR_RESET}"
    curl -d '{"id":1,"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",false]}' \
    -H "Content-Type: application/json" http://localhost:8545
}

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
function show_menu() {
    show_logo
    echo -e "${CLR_GREEN}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}2) ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}3) ‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}4) üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤${CLR_RESET}"
    echo -e "${CLR_GREEN}5) üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–¥—ã${CLR_RESET}"
    echo -e "${CLR_GREEN}6) üóë –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}7) ‚ùå –í—ã–π—Ç–∏${CLR_RESET}"
    echo -e "${CLR_INFO}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:${CLR_RESET}"
    read -r choice

    case $choice in
        1) install_node ;;
        2) start_node ;;
        3) stop_node ;;
        4) check_logs ;;
        5) check_status ;;
        6) remove_node ;;
        7) echo -e "${CLR_ERROR}–í—ã—Ö–æ–¥...${CLR_RESET}" ;;
        *) echo -e "${CLR_WARNING}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}" ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
show_menu
