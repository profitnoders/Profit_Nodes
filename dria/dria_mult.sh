#!/bin/bash

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ–Ω—ã
CLR_INFO='\033[1;97;44m'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏–Ω–µ–º —Ñ–æ–Ω–µ
CLR_SUCCESS='\033[1;30;42m'  # –ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
CLR_WARNING='\033[1;37;41m'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º —Ñ–æ–Ω–µ
CLR_ERROR='\033[1;31;40m'  # –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
CLR_RESET='\033[0m'  # –°–±—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
CLR_GREEN='\033[0;32m' # –ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${CLR_SUCCESS} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã Dria ${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function install_dependencies() {
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y git make jq build-essential gcc unzip wget curl
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    echo -e "${CLR_INFO}‚ñ∂ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker...${CLR_RESET}"
    if ! command -v docker &> /dev/null; then
        echo "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
        sudo apt update
        sudo apt install -y ca-certificates curl gnupg
        sudo install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt update
        sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin 
        sudo systemctl enable --now docker
    fi

    echo -e "${CLR_INFO}‚ñ∂ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker Compose...${CLR_RESET}"

    if command -v docker compose &> /dev/null; then
    echo -e "${CLR_SUCCESS}‚úî –ù–∞–π–¥–µ–Ω Docker Compose v2 (docker compose).${CLR_RESET}"
    DOCKER_COMPOSE="docker compose"
    elif command -v docker-compose &> /dev/null; then
    echo -e "${CLR_SUCCESS}‚úî –ù–∞–π–¥–µ–Ω Docker Compose v1 (docker-compose).${CLR_RESET}"
    DOCKER_COMPOSE="docker-compose"
    else
    echo -e "${CLR_WARNING}‚ö† Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é v1...${CLR_RESET}"
    sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    DOCKER_COMPOSE="docker-compose"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—â—ë —Ä–∞–∑ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if ! command -v $DOCKER_COMPOSE &> /dev/null; then
    echo -e "${CLR_ERROR}‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Compose!${CLR_RESET}"
    exit 1
    fi


    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
    sudo usermod -aG docker $USER
    sleep 1
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã
function install_node() {
    echo -e "${CLR_INFO}–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–¥—ã Dria...${CLR_RESET}"
    install_dependencies

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ª–∞—É–Ω—á–µ—Ä–∞
    curl -fsSL https://dria.co/launcher | bash

    echo -e "${CLR_SUCCESS}–ë–∏–Ω–∞—Ä–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${CLR_RESET}"
    echo "–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é dria-mult..."
    mkdir -p dria-mult

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    while true; do
    read -p "–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–æ—Ç 2 –¥–æ 10) –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å? " NUM_CONTAINERS
    if [[ $NUM_CONTAINERS -ge 2 && $NUM_CONTAINERS -le 10 ]]; then
        break
    else
        echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 10."
    fi
    done

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –±—É–¥–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–∫—Å–∏
    read -p "–ë—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏? (y/n) " USE_PROXY

    if [[ "$USE_PROXY" == "y" || "$USE_PROXY" == "Y" ]]; then
    read -p "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: http://user:pass@host:port): " PROXY
    fi

    # –°–∫–∞—á–∏–≤–∞–µ–º Dockerfile
    echo "–°–∫–∞—á–∏–≤–∞–µ–º Dockerfile –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é dria-mult..."
    cd dria-mult
    curl -fsSL https://raw.githubusercontent.com/profitnoders/Profit_Nodes/main/dria/Dockerfile -o Dockerfile

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é nodes –∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    mkdir -p nodes
    for ((i=1; i<=NUM_CONTAINERS; i++)); do
    mkdir -p nodes/node$i
    done

    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é .dria –≤ –∫–∞–∂–¥—É—é –ø–∞–ø–∫—É
    echo "–ö–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é .dria –≤ –∫–∞–∂–¥—É—é –ø–∞–ø–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞—ë–º env —Ñ–∞–π–ª—ã..."
    for ((i=1; i<=NUM_CONTAINERS; i++)); do
    cp -r ~/.dria nodes/node$i/
    
    done

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API-–∫–ª—é—á ChatGPT
    read -p "–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á ChatGPT: " CHATGPT_API_KEY

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º docker-compose.yml
    echo "–°–æ–∑–¥–∞–µ–º docker-compose.yml..."
    cat > docker-compose.yml <<EOF
version: '3.8'
services:
EOF
    echo "–°–µ–π—á–∞—Å –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è $NUM_CONTAINERS –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—ã."
    for (( i=1; i<=NUM_CONTAINERS; i++ ))
    do
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è node$i: " DKN_WALLET_SECRET_KEY

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    NODE_DIR="./nodes/node$i/.dria"
    mkdir -p "$NODE_DIR/dkn-compute-launcher"

    # –°–∫–∞—á–∏–≤–∞–µ–º .env-—Ñ–∞–π–ª
    ENV_URL="https://raw.githubusercontent.com/profitnoders/Profit_Nodes/main/dria/.env"
    ENV_FILE="$NODE_DIR/dkn-compute-launcher/.env"
    curl -s -o "$ENV_FILE" "$ENV_URL"

    # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª–µ .env
    PORT="400$i"
    sed -i "s|DKN_P2P_LISTEN_ADDR=.*|DKN_P2P_LISTEN_ADDR=/ip4/0.0.0.0/tcp/$PORT|" "$ENV_FILE"

    # –î–æ–±–∞–≤–ª—è–µ–º API-–∫–ª—é—á –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ .env
    # –ó–∞–º–µ–Ω—è–µ–º (–∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º) —Å—Ç—Ä–æ–∫—É OPENAI_API_KEY
    if grep -q '^OPENAI_API_KEY=' "$ENV_FILE"; then
    sed -i "s|^OPENAI_API_KEY=.*|OPENAI_API_KEY=$CHATGPT_API_KEY|" "$ENV_FILE"
    else
    echo "OPENAI_API_KEY=$CHATGPT_API_KEY" >> "$ENV_FILE"
    fi

    # –ó–∞–º–µ–Ω—è–µ–º (–∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º) —Å—Ç—Ä–æ–∫—É DKN_WALLET_SECRET_KEY
    if grep -q '^DKN_WALLET_SECRET_KEY=' "$ENV_FILE"; then
    sed -i "s|^DKN_WALLET_SECRET_KEY=.*|DKN_WALLET_SECRET_KEY=$DKN_WALLET_SECRET_KEY|" "$ENV_FILE"
    else
    echo "DKN_WALLET_SECRET_KEY=$DKN_WALLET_SECRET_KEY" >> "$ENV_FILE"
    fi

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –≤ docker-compose.yml
    cat >> docker-compose.yml <<EOF
    dria-node-$i:
        build: .
        container_name: dria_node_$i
        volumes:
        - ./nodes/node$i/.dria:/root/.dria
        ports:
        - "$PORT:$PORT"
EOF

    if [[ "$USE_PROXY" == "y" || "$USE_PROXY" == "Y" ]]; then
        cat >> docker-compose.yml <<EOF
        environment:
        - http_proxy=$PROXY
        - https_proxy=$PROXY
EOF
    fi

    cat >> docker-compose.yml <<EOF
        command: bash -c "./.dria/bin/dkn-compute-launcher start"
EOF
    done

    echo "–§–∞–π–ª docker-compose.yml —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å $NUM_CONTAINERS –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏."
    echo "–í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .dria –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã, –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏ API-–∫–ª—é—á–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã."
}

function sum_points() {
    cd ~/dria-mult || exit 1
    total=0

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ docker-compose.yml
    containers=$(docker-compose ps --services)

    for container in $containers; do
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å $DRIA Points –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        last_line=$(docker-compose logs "$container" 2>/dev/null | grep '\$DRIA Points:' | tail -n 1)

        if [[ -n "$last_line" ]]; then
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ $DRIA Points:
            points=$(echo "$last_line" | sed -n 's/.*\$DRIA Points: \([0-9]\+\).*/\1/p')
            echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container: $points points"

            # –°—É–º–º–∏—Ä—É–µ–º
            total=$((total + points))
        else
            echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container: $CLR_WARNING –Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å \$DRIA Points$CLR_RESET"
        fi
    done

    echo -e "${CLR_SUCCESS}–°—É–º–º–∞ –≤—Å–µ—Ö $DRIA Points: $total${CLR_RESET}"
}


function start_node() {
    cd ~/dria-mult
    docker-compose up -d
}

function restart_node() {
    cd ~/dria-mult
    docker-compose down && docker-compose up -d
}

function show_logs() {
    cd ~/dria-mult
    docker-compose logs --tail 200 -f
}

function remove_node() {
    cd ~/dria-mult
    docker-compose down
    cd ~
    rm -rf ~/dria-mult
}

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
function show_menu() {
    show_logo
    echo -e "${CLR_GREEN}1) üöÄ –ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥${CLR_RESET}"
    echo -e "${CLR_GREEN}2) ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å docker-compose${CLR_RESET}"
    echo -e "${CLR_GREEN}3) üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å docker-compose${CLR_RESET}"
    echo -e "${CLR_GREEN}4) üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏${CLR_RESET}"
    echo -e "${CLR_GREEN}5) üí∞ –ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –≤—Å–µ—Ö DRIA Points${CLR_RESET}"
    echo -e "${CLR_GREEN}6) üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}7) ‚ùå –í—ã–π—Ç–∏${CLR_RESET}"
    echo -e "${CLR_INFO}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:${CLR_RESET}"
    read -r choice

    case $choice in
        1) install_node ;;
        2) start_node ;;
        3) restart_node ;;
        4) show_logs ;;
        5) sum_points ;;
        6) remove_node ;;
        7) echo -e "${CLR_ERROR}–í—ã—Ö–æ–¥...${CLR_RESET}" ;;
        *) echo -e "${CLR_WARNING}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}" ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
show_menu
