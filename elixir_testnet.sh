#!/bin/bash

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ–Ω—ã
CLR_INFO='\033[1;97;44m'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏–Ω–µ–º —Ñ–æ–Ω–µ
CLR_SUCCESS='\033[1;30;42m'  # –ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
CLR_WARNING='\033[1;37;41m'  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º —Ñ–æ–Ω–µ
CLR_ERROR='\033[1;31;40m'  # –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ
CLR_RESET='\033[0m'  # –°–±—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
CLR_GREEN='\033[0;32m' #–ó–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${CLR_INFO}      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –Ω–æ–¥—ã Elixir Testnet    ${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function install_dependencies() {
    sudo apt update -y
    sudo apt install -y curl git jq lz4 build-essential unzip docker.io
    sudo systemctl enable docker
    sudo systemctl start docker
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã
function install_node() {
    echo -e "${CLR_INFO}‚ñ∂ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–¥—É Elixir –≤ —Ç–µ—Å—Ç–Ω–µ—Ç–µ...${CLR_RESET}"

    INSTALL_DIR="$HOME/elixir-testnet"
    CONFIG_FILE="$INSTALL_DIR/validator.env"

    mkdir -p "$INSTALL_DIR"
    cd "$INSTALL_DIR" || exit
    wget https://files.elixir.finance/validator.env -O "$CONFIG_FILE"

    echo -e "${CLR_ERROR}–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:${CLR_RESET}"
    read -r NODE_NAME
    echo -e "${CLR_ERROR}–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ EVM:${CLR_RESET}"
    read -r WALLET
    echo -e "${CLR_ERROR}–í–≤–µ–¥–∏—Ç–µ private key –æ—Ç EVM –∫–æ—à–µ–ª—å–∫–∞:${CLR_RESET}"
    read -r PRIV_KEY
    echo -e "${CLR_ERROR}–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:${CLR_RESET}"
    read -r IP_ADDR

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    sed -i "s|ENV=.*|ENV=testnet-3|" "$CONFIG_FILE"
    echo "STRATEGY_EXECUTOR_IP_ADDRESS=$IP_ADDR" >> "$CONFIG_FILE"
    echo "STRATEGY_EXECUTOR_DISPLAY_NAME=$NODE_NAME" >> "$CONFIG_FILE"
    echo "STRATEGY_EXECUTOR_BENEFICIARY=$WALLET" >> "$CONFIG_FILE"
    echo "SIGNER_PRIVATE_KEY=$PRIV_KEY" >> "$CONFIG_FILE"

    docker pull elixirprotocol/validator:testnet
    docker run --name elixir_testnet_node --env-file "$CONFIG_FILE" --platform linux/amd64 -p 17690:17690 --restart unless-stopped elixirprotocol/validator:testnet

    echo -e "${CLR_SUCCESS}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${CLR_RESET}"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
function update_node() {
    echo -e "${CLR_INFO}‚ñ∂ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–¥—É Elixir Testnet...${CLR_RESET}"

    docker stop elixir_testnet_node
    docker rm elixir_testnet_node
    docker pull elixirprotocol/validator:testnet
    docker run --name elixir_testnet_node --env-file "$HOME/elixir-testnet/validator.env" --platform linux/amd64 -p 17690:17690 --restart unless-stopped elixirprotocol/validator:testnet

    echo -e "${CLR_SUCCESS}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${CLR_RESET}"
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
function view_logs() {
    echo -e "${CLR_INFO}‚ñ∂ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤...${CLR_RESET}"
    docker logs -f elixir_testnet_node
}

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
function remove_node() {
    docker stop elixir_testnet_node
    docker rm elixir_testnet_node
    rm -rf "$HOME/elixir-testnet"
    echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!${CLR_RESET}"
}

# –ú–µ–Ω—é
function show_menu() {
    show_logo
    echo -e "${CLR_GREEN}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}2) üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}3) üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏${CLR_RESET}"
    echo -e "${CLR_GREEN}4) üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}5) ‚ùå –í—ã–π—Ç–∏${CLR_RESET}"

    echo -e "${CLR_WARNING}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è:${CLR_RESET}"
    read -r choice
    case $choice in
        1) install_dependencies; install_node ;;
        2) update_node ;;
        3) view_logs ;;
        4) remove_node ;;
        5) exit 0 ;;
        *) echo -e "${CLR_RED}–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!${CLR_RESET}" && show_menu ;;
    esac
}

show_menu
