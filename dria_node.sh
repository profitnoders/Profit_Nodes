#!/bin/bash

# –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${GREEN}===============================${NC}"
    echo -e "${CYAN} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã Dria ${NC}"
    echo -e "${GREEN}===============================${NC}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function install_dependencies() {
    echo -e "${YELLOW}–û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã...${NC}"
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y git make jq build-essential gcc unzip wget lz4 aria2 curl
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã
function install_node() {
    echo -e "${BLUE}–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–¥—ã Dria...${NC}"
    install_dependencies

    ARCH=$(uname -m)
    if [[ "$ARCH" == "aarch64" ]]; then
        DOWNLOAD_URL="https://github.com/firstbatchxyz/dkn-compute-launcher/releases/latest/download/dkn-compute-launcher-linux-arm64.zip"
    elif [[ "$ARCH" == "x86_64" ]]; then
        DOWNLOAD_URL="https://github.com/firstbatchxyz/dkn-compute-launcher/releases/latest/download/dkn-compute-launcher-linux-amd64.zip"
    else
        echo -e "${RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã: $ARCH. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.${NC}"
        exit 1
    fi

    curl -L -o dkn-compute-node.zip $DOWNLOAD_URL
    unzip dkn-compute-node.zip -d dkn-compute-node
    cd dkn-compute-node || { echo -e "${RED}–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.${NC}"; exit 1; }
    ./dkn-compute-launcher
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
function create_and_start_service() {
    echo -e "${BLUE}–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–æ–¥—ã Dria...${NC}"
    USERNAME=$(whoami)
    HOME_DIR=$(eval echo "~$USERNAME")

    sudo bash -c "cat <<EOT > /etc/systemd/system/dria.service
[Unit]
Description=Dria Compute Node Service
After=network.target

[Service]
User=$USERNAME
EnvironmentFile=$HOME_DIR/dkn-compute-node/.env
ExecStart=$HOME_DIR/dkn-compute-node/dkn-compute-launcher
WorkingDirectory=$HOME_DIR/dkn-compute-node/
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOT"

    sudo systemctl daemon-reload
    sudo systemctl enable dria
    sudo systemctl start dria
    echo -e "${GREEN}–°–µ—Ä–≤–∏—Å Dria –∑–∞–ø—É—â–µ–Ω!${NC}"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
function update_node() {
    echo -e "${BLUE}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏...${NC}"
    sudo systemctl stop dria
    rm -rf $HOME/dkn-compute-node
    install_node
    create_and_start_service
    echo -e "${GREEN}–ù–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!${NC}"
}

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
function change_port() {
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è –Ω–æ–¥—ã Dria:${NC}"
    read -r NEW_PORT
    sed -i "s|DKN_P2P_LISTEN_ADDR=/ip4/0.0.0.0/tcp/[0-9]*|DKN_P2P_LISTEN_ADDR=/ip4/0.0.0.0/tcp/$NEW_PORT|" "$HOME/dkn-compute-node/.env"
    sudo systemctl restart dria
    echo -e "${GREEN}–ü–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ $NEW_PORT.${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
function check_logs() {
    echo -e "${BLUE}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–æ–¥—ã Dria...${NC}"
    sudo journalctl -u dria -f --no-hostname -o cat
}

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
function remove_node() {
    echo -e "${BLUE}–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Dria...${NC}"
    sudo systemctl stop dria
    sudo systemctl disable dria
    sudo rm /etc/systemd/system/dria.service
    rm -rf $HOME/dkn-compute-node
    sudo systemctl daemon-reload
    echo -e "${GREEN}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.${NC}"
}

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
function show_menu() {
    show_logo
    echo -e "${CYAN}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${NC}"
    echo -e "${CYAN}2) ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É${NC}"
    echo -e "${CYAN}3) üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${NC}"
    echo -e "${CYAN}4) üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç${NC}"
    echo -e "${CYAN}5) üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤${NC}"
    echo -e "${CYAN}6) üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${NC}"
    echo -e "${CYAN}7) ‚ùå –í—ã–π—Ç–∏${NC}"
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:${NC}"
    read -r choice

    case $choice in
        1) install_node ;;
        2) create_and_start_service ;;
        3) update_node ;;
        4) change_port ;;
        5) check_logs ;;
        6) remove_node ;;
        7) echo -e "${GREEN}–í—ã—Ö–æ–¥...${NC}" ;;
        *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}" ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
show_menu
