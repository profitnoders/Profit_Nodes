#!/bin/bash

# –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã
CLR_INFO='\033[1;36m'  # –ì–æ–ª—É–±–æ–π —Ü–≤–µ—Ç
CLR_SUCCESS='\033[1;32m'  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
CLR_WARNING='\033[1;33m'  # –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
CLR_ERROR='\033[1;31m'  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
CLR_RESET='\033[0m'  # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${CLR_SUCCESS}==========================================================${CLR_RESET}"
    echo -e "${CLR_INFO}         –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Gaianet Node       ${CLR_RESET}"
    echo -e "${CLR_SUCCESS}==========================================================${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã Gaianet
function install_node() {
    echo -e "${CLR_INFO}‚ñ∂ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É...${CLR_RESET}"
    sudo apt update -y
    sudo apt-get update -y
    sleep 2

    echo -e "${CLR_INFO}‚ñ∂ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–¥—É Gaianet...${CLR_RESET}"
    curl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash
    sleep 3

    echo -e "${CLR_INFO}‚ñ∂ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...${CLR_RESET}"
    echo "export PATH=\$PATH:$HOME/gaianet/bin" >> $HOME/.bashrc
    sleep 5
    source ~/.bashrc
    sleep 9

    echo -e "${CLR_INFO}‚ñ∂ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–∑–µ–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...${CLR_RESET}"
    gaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/qwen2-0.5b-instruct/config.json
    sleep 3

    #sed -i 's/"llamaedge_port": "8080"/"llamaedge_port": "8781"/g' ~/gaianet/config.json

    echo -e "${CLR_SUCCESS}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${CLR_RESET}"
}

# –ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã
function start_node() {
    echo -e "${CLR_INFO}‚ñ∂ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—É Gaianet...${CLR_RESET}"
    gaianet start
    echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞!${CLR_RESET}"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–µ
function get_node_info() {
    echo -e "${CLR_INFO}‚ñ∂ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ...${CLR_RESET}"
    gaianet info
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
function setup_bot() {
    echo -e "${CLR_INFO}‚ñ∂ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã...${CLR_RESET}"
    sudo apt update -y
    sudo apt install -y python3-pip python3-dev python3-venv curl git
    sudo apt install nano -y
    sudo apt install screen -y
    pip3 install aiohttp

    echo -e "${CLR_INFO}‚ñ∂ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python...${CLR_RESET}"
    pip install requests faker

    echo -e "${CLR_INFO}‚ñ∂ –ü–æ–ª—É—á–∞–µ–º Node ID –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –±–æ—Ç–∞...${CLR_RESET}"
    NODE_ID=$(gaianet info | awk -F': ' '/Node ID/{print $2}' | tr -d '[:space:]' | sed 's/\x1B\[[0-9;]*[mK]//g')

    if [[ -z "$NODE_ID" ]]; then
        echo -e "${CLR_ERROR}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Node ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–æ–¥—ã!${CLR_RESET}"
        exit 1
    fi

    echo -e "${CLR_SUCCESS}‚úÖ Node ID: $NODE_ID${CLR_RESET}"

    echo -e "${CLR_INFO}‚ñ∂ –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∏–ø—Ç –±–æ—Ç–∞...${CLR_RESET}"
    cat <<EOF > ~/random_chat_with_faker.py
import requests
import random
import logging
import time
from faker import Faker
from datetime import datetime

node_url = "https://$NODE_ID.gaia.domains/v1/chat/completions" 
faker = Faker()

headers = {
    "accept": "application/json",
    "Content-Type": "application/json"
}

logging.basicConfig(filename='chat_log.txt', level=logging.INFO, format='%(asctime)s - %(message)s')

def log_message(node, message):
    logging.info(f"{node}: {message}")

def send_message(node_url, message):
    try:
        response = requests.post(node_url, json=message, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Failed to get response from API: {e}")
        return None

def extract_reply(response):
    if response and 'choices' in response:
        return response['choices'][0]['message']['content']
    return ""

while True:
    random_question = faker.sentence(nb_words=10)
    message = {
        "messages": [
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": random_question}
        ]
    }
    question_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    response = send_message(node_url, message)
    reply = extract_reply(response)
    reply_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message("Node replied", f"Q ({question_time}): {random_question} A ({reply_time}): {reply}")
    print(f"Q ({question_time}): {random_question}\nA ({reply_time}): {reply}")
    delay = random.randint(60, 180)
    time.sleep(delay)
EOF

    echo -e "${CLR_INFO}‚ñ∂ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ screen-—Å–µ—Å—Å–∏–∏...${CLR_RESET}"
    screen -S faker_session -dm python3 ~/random_chat_with_faker.py

    echo -e "${CLR_SUCCESS}‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!${CLR_RESET}"
}

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
function remove_node() {
    echo -e "${CLR_WARNING}‚ö† –£–¥–∞–ª—è–µ–º –Ω–æ–¥—É Gaianet...${CLR_RESET}"
    gaianet stop
    rm -rf ~/.gaianet

    echo -e "${CLR_SUCCESS}‚úÖ –ù–æ–¥–∞ —É–¥–∞–ª–µ–Ω–∞!${CLR_RESET}"
}

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function show_menu() {
    show_logo
    echo -e "${CLR_INFO}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_INFO}2) ‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_INFO}3) üìú –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ${CLR_RESET}"
    echo -e "${CLR_INFO}4) ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞${CLR_RESET}"
    echo -e "${CLR_INFO}5) üóë –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_INFO}6) ‚ùå –í—ã–π—Ç–∏${CLR_RESET}"

    read -r choice

    case $choice in
        1) install_node ;;
        2) start_node ;;
        3) get_node_info ;;
        4) setup_bot ;;
        5) remove_node ;;
        6) exit 0 ;;
        *) echo -e "${CLR_ERROR}‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!${CLR_RESET}" && show_menu ;;
    esac
}

# –ó–∞–ø—É—Å–∫ –º–µ–Ω—é
show_menu
