#!/bin/bash

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ–Ω—ã
CLR_INFO='\033[1;97;44m'
CLR_SUCCESS='\033[1;30;42m'
CLR_WARNING='\033[1;37;41m'
CLR_ERROR='\033[1;31;40m'
CLR_RESET='\033[0m'
CLR_GREEN='\033[0;32m'

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–∏
NETWORKS=(base optimism arbitrum polygon avalanche scroll linea gnosis)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
function show_logo() {
    echo -e "${CLR_INFO}      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–∞–º–∏ Hyperlane      ${CLR_RESET}"
    curl -s https://raw.githubusercontent.com/profitnoders/Profit_Nodes/refs/heads/main/logo_new.sh | bash
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
function select_network() {
    echo -e "${CLR_INFO}–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:${CLR_RESET}"
    select NETWORK in "${NETWORKS[@]}"; do
        if [[ -n "$NETWORK" ]]; then
            echo "$NETWORK" | xargs  # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
            return
        else
            echo -e "${CLR_WARNING}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}"
        fi
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
function view_logs() {
    echo -e "${CLR_INFO}–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:${CLR_RESET}"
    
    select NETWORK in "${NETWORKS[@]}"; do
        if [ -n "$NETWORK" ]; then
            CONTAINER_NAME="hyperlane_$NETWORK"
            echo "–ò—â—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $CONTAINER_NAME"

            if docker ps -a --format "{{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
                echo -e "${CLR_INFO}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –¥–ª—è $NETWORK...${CLR_RESET}"
                docker logs --tail 50 -f "$CONTAINER_NAME"
            else
                echo -e "${CLR_ERROR}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $CONTAINER_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω!${CLR_RESET}"
            fi
        else
            echo -e "${CLR_WARNING}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}"
        fi
        break
    done
}

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥ (–æ–¥–Ω–æ–π –∏–ª–∏ –≤—Å–µ—Ö)
function remove_node() {
    echo -e "${CLR_INFO}–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è:${CLR_RESET}"
    echo -e "${CLR_GREEN}1) –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}2) –£–¥–∞–ª–∏—Ç—å –í–°–ï –Ω–æ–¥—ã —Å—Ä–∞–∑—É${CLR_RESET}"
    read -r remove_choice

    case $remove_choice in
        1)
            echo -e "${CLR_INFO}–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:${CLR_RESET}"
            select NETWORK in "${NETWORKS[@]}"; do
                if [[ -n "$NETWORK" ]]; then
                    CONTAINER_NAME="hyperlane_$NETWORK"
                    echo "–£–¥–∞–ª—è—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $CONTAINER_NAME"

                    if docker ps -a --format "{{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
                        docker stop "$CONTAINER_NAME"
                        docker rm -f "$CONTAINER_NAME"
                        rm -rf "$HOME/hyperlane_db_$NETWORK"
                        echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ $NETWORK —É–¥–∞–ª–µ–Ω–∞.${CLR_RESET}"
                    else
                        echo -e "${CLR_ERROR}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $CONTAINER_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω!${CLR_RESET}"
                    fi
                else
                    echo -e "${CLR_WARNING}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}"
                fi
                break
            done
            ;;
        2)
            echo -e "${CLR_WARNING}–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –Ω–æ–¥—ã? (y/n)${CLR_RESET}"
            read -r confirm
            if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
                for NETWORK in "${NETWORKS[@]}"; do
                    CONTAINER_NAME="hyperlane_$NETWORK"
                    if docker ps -a --format "{{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
                        docker stop "$CONTAINER_NAME"
                        docker rm -f "$CONTAINER_NAME"
                        rm -rf "$HOME/hyperlane_db_$NETWORK"
                        echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ $NETWORK —É–¥–∞–ª–µ–Ω–∞.${CLR_RESET}"
                    fi
                done
                echo -e "${CLR_SUCCESS}–í—Å–µ –Ω–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã!${CLR_RESET}"
            else
                echo -e "${CLR_WARNING}–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.${CLR_RESET}"
            fi
            ;;
        *)
            echo -e "${CLR_ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${CLR_RESET}"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥ (–æ–¥–Ω–æ–π –∏–ª–∏ –≤—Å–µ—Ö)
function restart_node() {
    echo -e "${CLR_INFO}–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:${CLR_RESET}"
    echo -e "${CLR_GREEN}1) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–æ–¥—É${CLR_RESET}"
    echo -e "${CLR_GREEN}2) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –í–°–ï –Ω–æ–¥—ã${CLR_RESET}"
    read -r restart_choice

    case $restart_choice in
        1)
            echo -e "${CLR_INFO}–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:${CLR_RESET}"
            select NETWORK in "${NETWORKS[@]}"; do
                if [[ -n "$NETWORK" ]]; then
                    CONTAINER_NAME="hyperlane_$NETWORK"
                    echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $CONTAINER_NAME"

                    if docker ps -a --format "{{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
                        docker restart "$CONTAINER_NAME"
                        echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ $NETWORK –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞.${CLR_RESET}"
                    else
                        echo -e "${CLR_ERROR}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $CONTAINER_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω!${CLR_RESET}"
                    fi
                else
                    echo -e "${CLR_WARNING}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${CLR_RESET}"
                fi
                break
            done
            ;;
        2)
            echo -e "${CLR_WARNING}–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –í–°–ï –Ω–æ–¥—ã? (y/n)${CLR_RESET}"
            read -r confirm
            if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
                for NETWORK in "${NETWORKS[@]}"; do
                    CONTAINER_NAME="hyperlane_$NETWORK"
                    if docker ps -a --format "{{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
                        docker restart "$CONTAINER_NAME"
                        echo -e "${CLR_SUCCESS}–ù–æ–¥–∞ $NETWORK –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞.${CLR_RESET}"
                    fi
                done
                echo -e "${CLR_SUCCESS}–í—Å–µ –Ω–æ–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!${CLR_RESET}"
            else
                echo -e "${CLR_WARNING}–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.${CLR_RESET}"
            fi
            ;;
        *)
            echo -e "${CLR_ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${CLR_RESET}"
            ;;
    esac
}


# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã
function install_node() {
    install_dependencies
    
    echo -e "${CLR_INFO}–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ç–µ–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:${CLR_RESET}"
    echo -e "${CLR_GREEN}1) 3 —Å–µ—Ç–∏ (base, optimism, arbitrum)${CLR_RESET}"
    echo -e "${CLR_GREEN}2) 8 —Å–µ—Ç–µ–π (–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ)${CLR_RESET}"
    echo -e "${CLR_GREEN}3) –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–µ—Ç–∏${CLR_RESET}"
    read -r network_choice

    case $network_choice in
        1) SELECTED_NETWORKS=(base optimism arbitrum) ;;
        2) SELECTED_NETWORKS=("${NETWORKS[@]}") ;;
        3) 
            SELECTED_NETWORKS=()
            echo -e "${CLR_INFO}–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–¥–æ—Å—Ç—É–ø–Ω—ã: ${NETWORKS[*]})${CLR_RESET}"
            read -ra CUSTOM_NETWORKS
            for net in "${CUSTOM_NETWORKS[@]}"; do
                if [[ " ${NETWORKS[*]} " =~ " $net " ]]; then
                    SELECTED_NETWORKS+=("$net")
                else
                    echo -e "${CLR_WARNING}–°–µ—Ç—å $net –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ.${CLR_RESET}"
                fi
            done
            ;;
        *) echo -e "${CLR_ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${CLR_RESET}"; exit 1 ;;
    esac

    echo -e "${CLR_INFO}–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:${CLR_RESET}"
    read -r VALIDATOR_NAME
    echo -e "${CLR_INFO}–í–≤–µ–¥–∏—Ç–µ private key EVM –∫–æ—à–µ–ª—å–∫–∞ c 0x –≤ –Ω–∞—á–∞–ª–µ:${CLR_RESET}"
    read -r PRIVATE_KEY

    for NETWORK in "${SELECTED_NETWORKS[@]}"; do
        echo -e "${CLR_INFO}–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É RPC –¥–ª—è —Å–µ—Ç–∏ $NETWORK:${CLR_RESET}"
        read -r RPC_URL

        mkdir -p "$HOME/hyperlane_db_$NETWORK" && chmod -R 777 "$HOME/hyperlane_db_$NETWORK"

        docker run -d -it \
        --name hyperlane_$NETWORK \
        --mount type=bind,source="$HOME/hyperlane_db_$NETWORK",target="/hyperlane_db_$NETWORK" \
        gcr.io/abacus-labs-dev/hyperlane-agent:agents-v1.0.0 \
        ./validator \
        --db "/hyperlane_db_$NETWORK" \
        --originChainName "$NETWORK" \
        --reorgPeriod 1 \
        --validator.id "$VALIDATOR_NAME" \
        --validator.key "$PRIVATE_KEY" \
        --chains."$NETWORK".signer.key "$PRIVATE_KEY" \
        --chains."$NETWORK".customRpcUrls "$RPC_URL" \
        --checkpointSyncer.type localStorage \
        --checkpointSyncer.path /hyperlane_db_$NETWORK/checkpoints
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
function install_dependencies() {
    sudo apt update && sudo apt upgrade -y
    if ! command -v docker &> /dev/null; then
        sudo apt install docker.io -y
    else
        echo -e "${CLR_SUCCESS}Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${CLR_RESET}"
    fi
}


# –ú–µ–Ω—é
function show_menu() {
    show_logo
    echo -e "${CLR_GREEN}1) üöÄ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—ã${CLR_RESET}"
    echo -e "${CLR_GREEN}2) üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–¥—ã${CLR_RESET}"
    echo -e "${CLR_GREEN}3) üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—ã (–æ–¥–Ω—É –∏–ª–∏ –≤—Å–µ)${CLR_RESET}"
    echo -e "${CLR_GREEN}4) üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—ã (–æ–¥–Ω—É –∏–ª–∏ –≤—Å–µ)${CLR_RESET}"
    echo -e "${CLR_GREEN}5) ‚ùå –í—ã–π—Ç–∏${CLR_RESET}"
    read -r choice
    case $choice in
        1) install_node ;;
        2) view_logs ;;
        3) remove_node ;;
        4) restart_node ;;
        5) exit 0 ;;
        *) show_menu ;;
    esac
}

show_menu
